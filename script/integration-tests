#!/bin/bash
# Special case: if ./ksonnet-lib exists, set KUBECFG_JPATH
test -d $PWD/ksonnet-lib && export KUBECFG_JPATH=$PWD/ksonnet-lib

# We require below env
: ${GOPATH:?} ${KUBECFG_JPATH:?}

# Default to "dind" kubernetes context
INTEGRATION_TESTS_CTX=${1:-dind}

# ... and 'bats' installed
which bats > /dev/null || {
   echo "ERROR: 'bats' is required to run these tests," \
        "install it from https://github.com/sstephenson/bats"
   exit 255
}

k8s_create_dind() {
    # Bring up kubeadm-dind-cluster (docker-in-docker k8s cluster)
    DIND_CLUSTER_SH=dind-cluster-v1.7.sh
    DIND_URL=https://cdn.rawgit.com/Mirantis/kubeadm-dind-cluster/master/fixed/${DIND_CLUSTER_SH}
    rm -f ${DIND_CLUSTER_SH}
    wget ${DIND_URL}
    chmod +x ${DIND_CLUSTER_SH}
    ./${DIND_CLUSTER_SH} up
    export PATH="$HOME/.kubeadm-dind-cluster:$PATH"
    sleep 5
}

## main() ##
# Create k8s cluster (only "dind" supported atm) if missing:
kubectl get nodes --context=${INTEGRATION_TESTS_CTX:?} || k8s_create_${INTEGRATION_TESTS_CTX} || exit 255
export TEST_CONTEXT=${INTEGRATION_TESTS_CTX}

source script/libtest.bash
trap k8s_context_restore 0
k8s_context_save

# Run the tests thru bats:
kubectl create namespace kubeless
bats tests/integration-tests.bats

# Just showing remaining k8s objects
kubectl get all --all-namespaces
